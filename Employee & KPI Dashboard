import React, { useState, useEffect } from 'react';
import { Upload, Home, Users, Calendar, BarChart3, PieChart, LineChart, TrendingUp, Edit, Trash2, Plus, Save, Filter, Download, Settings, Database, Target, DollarSign, Activity, Clock, AlertCircle, CheckCircle } from 'lucide-react';

const Dashboard = () => {
  const [currentPage, setCurrentPage] = useState('home');
  const [uploadedData, setUploadedData] = useState([]);
  const [cleanedData, setCleanedData] = useState([]);
  const [originalData, setOriginalData] = useState([]);
  const [employees, setEmployees] = useState([
    { 
      id: 1, 
      employeeId: 'EMP001',
      name: 'John Doe', 
      gender: 'Male',
      jobTitle: 'Sales Manager',
      department: 'Sales', 
      employmentStatus: 'Active',
      email: 'john@company.com', 
      phone: '123-456-7890', 
      address: '123 Main St, City, State 12345',
      dateOfJoining: '2022-01-15',
      image: null 
    },
    { 
      id: 2, 
      employeeId: 'EMP002',
      name: 'Jane Smith', 
      gender: 'Female',
      jobTitle: 'Marketing Specialist',
      department: 'Marketing', 
      employmentStatus: 'Active',
      email: 'jane@company.com', 
      phone: '098-765-4321', 
      address: '456 Oak Ave, City, State 67890',
      dateOfJoining: '2021-03-20',
      image: null 
    },
    { 
      id: 3, 
      employeeId: 'EMP003',
      name: 'Mike Johnson', 
      gender: 'Male',
      jobTitle: 'Software Developer',
      department: 'IT', 
      employmentStatus: 'Active',
      email: 'mike@company.com', 
      phone: '555-123-4567', 
      address: '789 Pine Rd, City, State 11111',
      dateOfJoining: '2020-07-10',
      image: null 
    },
    { 
      id: 4, 
      employeeId: 'EMP004',
      name: 'Sarah Wilson', 
      gender: 'Female',
      jobTitle: 'HR Coordinator',
      department: 'HR', 
      employmentStatus: 'Active',
      email: 'sarah@company.com', 
      phone: '444-555-6666', 
      address: '321 Elm St, City, State 22222',
      dateOfJoining: '2023-02-01',
      image: null 
    }
  ]);
  const [attendance, setAttendance] = useState({});
  const [selectedKPIs, setSelectedKPIs] = useState(['revenue', 'employees', 'productivity', 'satisfaction']);
  const [chartTypes, setChartTypes] = useState({
    revenue: 'bar',
    employees: 'pie',
    productivity: 'line',
    satisfaction: 'bar'
  });
  const [editingEmployee, setEditingEmployee] = useState(null);
  const [showAddEmployee, setShowAddEmployee] = useState(false);
  const [newEmployee, setNewEmployee] = useState({
    name: '',
    gender: '',
    jobTitle: '',
    department: '',
    employmentStatus: '',
    email: '',
    phone: '',
    address: '',
    dateOfJoining: '',
    image: null
  });
  
  const [dataColumns, setDataColumns] = useState([]);
  const [kpiMappings, setKpiMappings] = useState({
    revenue: { column: '', type: 'sum' },
    employees: { column: '', type: 'count' },
    productivity: { column: '', type: 'average' },
    satisfaction: { column: '', type: 'average' },
    expenses: { column: '', type: 'sum' },
    conversion: { column: '', type: 'average' }
  });
  const [showKpiMapping, setShowKpiMapping] = useState(false);
  const [selectedEmployeeFilter, setSelectedEmployeeFilter] = useState('all');
  const [showFilters, setShowFilters] = useState(false);
  const [selectedDateRange, setSelectedDateRange] = useState('last30days');
  const [selectedDepartment, setSelectedDepartment] = useState('all');
  
  const [googleConfig, setGoogleConfig] = useState({
    spreadsheetId: '',
    apiKey: '',
    isConfigured: false
  });
  const [showGoogleConfig, setShowGoogleConfig] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [lastSyncTime, setLastSyncTime] = useState(null);
  
  const [kpiData, setKpiData] = useState({
    revenue: { value: 125000, change: 12.5, target: 150000, data: [95000, 108000, 112000, 118000, 125000], unit: '$', trend: 'up' },
    employees: { value: 4, change: 0, target: 5, data: [3, 3, 4, 4, 4], unit: '', trend: 'stable' },
    productivity: { value: 87.5, change: -2.1, target: 90, data: [85, 88, 90, 89, 87.5], unit: '%', trend: 'down' },
    satisfaction: { value: 4.2, change: 8.3, target: 4.5, data: [3.8, 4.0, 4.1, 4.0, 4.2], unit: '/5', trend: 'up' },
    expenses: { value: 45000, change: -5.2, target: 40000, data: [50000, 48000, 46000, 45500, 45000], unit: '$', trend: 'down' },
    conversion: { value: 15.8, change: 3.2, target: 18, data: [14.2, 15.1, 15.5, 15.6, 15.8], unit: '%', trend: 'up' }
  });

  const availableKPIs = [
    { id: 'revenue', name: 'Revenue', icon: DollarSign, color: 'blue' },
    { id: 'employees', name: 'Employee Count', icon: Users, color: 'green' },
    { id: 'productivity', name: 'Productivity', icon: Activity, color: 'purple' },
    { id: 'satisfaction', name: 'Satisfaction', icon: TrendingUp, color: 'orange' },
    { id: 'expenses', name: 'Expenses', icon: Target, color: 'red' },
    { id: 'conversion', name: 'Conversion Rate', icon: BarChart3, color: 'indigo' }
  ];

  const attendanceOptions = ['Present', 'Absent', 'Late', 'Half Day', 'Sick Leave', 'Vacation'];
  const weekDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];

  useEffect(() => {
    const initAttendance = {};
    employees.forEach(emp => {
      initAttendance[emp.id] = {
        sunday: 'Absent',
        monday: 'Present',
        tuesday: 'Present',
        wednesday: 'Present',
        thursday: 'Present',
        friday: 'Present',
        saturday: 'Absent'
      };
    });
    setAttendance(initAttendance);
  }, [employees]);

  const removeEmptyRows = () => {
    const cleaned = cleanedData.filter(row => 
      Object.values(row).some(value => value !== null && value !== undefined && value !== '')
    );
    setCleanedData(cleaned);
  };

  const resetToOriginal = () => {
    if (originalData.length > 0) {
      setCleanedData([...originalData]);
      alert('Data reset to original uploaded version');
    } else {
      alert('No original data to reset to');
    }
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const fileName = file.name;
      const fileSize = (file.size / 1024 / 1024).toFixed(2);
      
      if (fileName.toLowerCase().endsWith('.csv')) {
        const sampleData = [
          { Employee_Name: 'John Doe', Department: 'Sales', Revenue: 25000, Productivity_Score: 88, Customer_Satisfaction: 4.2 },
          { Employee_Name: 'Jane Smith', Department: 'Marketing', Revenue: 32000, Productivity_Score: 92, Customer_Satisfaction: 4.5 },
          { Employee_Name: 'Mike Johnson', Department: 'IT', Revenue: 28000, Productivity_Score: 85, Customer_Satisfaction: 4.0 },
          { Employee_Name: 'Sarah Wilson', Department: 'HR', Revenue: 18000, Productivity_Score: 90, Customer_Satisfaction: 4.3 },
          { Employee_Name: 'David Brown', Department: 'Sales', Revenue: 35000, Productivity_Score: 94, Customer_Satisfaction: 4.6 },
          { Employee_Name: 'Lisa Garcia', Department: 'Marketing', Revenue: 29000, Productivity_Score: 87, Customer_Satisfaction: 4.1 },
          { Employee_Name: 'Tom Anderson', Department: 'IT', Revenue: 31000, Productivity_Score: 89, Customer_Satisfaction: 4.4 },
          { Employee_Name: 'Emma Davis', Department: 'Finance', Revenue: 26000, Productivity_Score: 91, Customer_Satisfaction: 4.2 }
        ];
        processUploadedData(sampleData, fileName, fileSize);
      } else if (fileName.toLowerCase().includes('.xlsx') || fileName.toLowerCase().includes('.xls')) {
        const sampleData = [
          { ID: 1, Employee: 'John Doe', Dept: 'Sales', Q1_Revenue: 25000, Q1_Productivity: 88, Q1_Satisfaction: 4.2 },
          { ID: 2, Employee: 'Jane Smith', Dept: 'Marketing', Q1_Revenue: 32000, Q1_Productivity: 92, Q1_Satisfaction: 4.5 },
          { ID: 3, Employee: 'Mike Johnson', Dept: 'IT', Q1_Revenue: 28000, Q1_Productivity: 85, Q1_Satisfaction: 4.0 },
          { ID: 4, Employee: 'Sarah Wilson', Dept: 'HR', Q1_Revenue: 18000, Q1_Productivity: 90, Q1_Satisfaction: 4.3 },
          { ID: 5, Employee: 'David Brown', Dept: 'Sales', Q1_Revenue: 35000, Q1_Productivity: 94, Q1_Satisfaction: 4.6 }
        ];
        processUploadedData(sampleData, fileName, fileSize);
      } else {
        alert('Unsupported file format. Please upload .csv, .xlsx, or .xls files.');
      }
    }
  };

  const processUploadedData = (data, fileName, fileSize) => {
    setUploadedData(data);
    setOriginalData([...data]);
    setCleanedData([...data]);
    setDataColumns(Object.keys(data[0] || {}));
    alert(`File "${fileName}" uploaded successfully! ${data.length} rows imported.`);
  };

  const addEmployee = (employeeData) => {
    const id = Math.max(...employees.map(e => e.id), 0) + 1;
    const employeeId = `EMP${String(id).padStart(3, '0')}`;
    const newEmp = { ...employeeData, id, employeeId };
    setEmployees([...employees, newEmp]);
    setNewEmployee({ 
      name: '', 
      gender: '', 
      jobTitle: '', 
      department: '', 
      employmentStatus: '', 
      email: '', 
      phone: '', 
      address: '', 
      dateOfJoining: '', 
      image: null 
    });
    setShowAddEmployee(false);
  };

  // Calculate employee tenure in years and months
  const calculateTenure = (dateOfJoining) => {
    if (!dateOfJoining) return 'N/A';
    
    const joinDate = new Date(dateOfJoining);
    const currentDate = new Date();
    
    let years = currentDate.getFullYear() - joinDate.getFullYear();
    let months = currentDate.getMonth() - joinDate.getMonth();
    
    if (months < 0) {
      years--;
      months += 12;
    }
    
    if (years === 0) {
      return `${months} month${months !== 1 ? 's' : ''}`;
    } else if (months === 0) {
      return `${years} year${years !== 1 ? 's' : ''}`;
    } else {
      return `${years} year${years !== 1 ? 's' : ''}, ${months} month${months !== 1 ? 's' : ''}`;
    }
  };

  const updateEmployee = (id, updatedEmployee) => {
    setEmployees(employees.map(emp => emp.id === id ? { ...emp, ...updatedEmployee } : emp));
    setEditingEmployee(null);
  };

  const deleteEmployee = (id) => {
    if (window.confirm('Are you sure you want to delete this employee?')) {
      setEmployees(employees.filter(emp => emp.id !== id));
    }
  };

  const handleImageUpload = (file, isEditing = false) => {
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imageData = e.target.result;
        if (isEditing && editingEmployee) {
          setEditingEmployee({ ...editingEmployee, image: imageData });
        } else {
          setNewEmployee({ ...newEmployee, image: imageData });
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const updateAttendance = (employeeId, day, status) => {
    setAttendance(prev => ({
      ...prev,
      [employeeId]: {
        ...prev[employeeId],
        [day]: status
      }
    }));
  };

  const renderChart = (kpiId, type, data) => {
    const chartData = data.data || [];
    const maxValue = Math.max(...chartData);
    
    if (type === 'bar') {
      return (
        <div className="flex items-end justify-between h-32 bg-gray-50 p-4 rounded">
          {chartData.map((value, index) => (
            <div key={index} className="flex flex-col items-center">
              <div 
                className="bg-blue-500 w-6 rounded-t transition-all duration-300"
                style={{ height: `${(value / maxValue) * 100}px` }}
              ></div>
              <span className="text-xs mt-1 text-gray-600">{index + 1}</span>
            </div>
          ))}
        </div>
      );
    } else if (type === 'line') {
      return (
        <div className="h-32 bg-gray-50 p-4 rounded relative">
          <svg className="w-full h-full">
            <polyline
              fill="none"
              stroke="#3B82F6"
              strokeWidth="3"
              points={chartData.map((value, index) => 
                `${(index / (chartData.length - 1)) * 280},${120 - (value / maxValue) * 80}`
              ).join(' ')}
            />
          </svg>
        </div>
      );
    } else {
      const percentage = (data.value / data.target) * 100;
      return (
        <div className="h-32 bg-gray-50 p-4 rounded flex items-center justify-center">
          <div className="relative w-24 h-24">
            <svg className="w-24 h-24 transform -rotate-90">
              <circle cx="48" cy="48" r="40" stroke="#E5E7EB" strokeWidth="8" fill="none" />
              <circle 
                cx="48" 
                cy="48" 
                r="40" 
                stroke="#3B82F6" 
                strokeWidth="8" 
                fill="none"
                strokeDasharray={`${percentage * 2.51} 251`}
              />
            </svg>
            <div className="absolute inset-0 flex items-center justify-center">
              <span className="text-sm font-bold">{percentage.toFixed(0)}%</span>
            </div>
          </div>
        </div>
      );
    }
  };

  const departments = [...new Set(employees.map(emp => emp.department))];

  const NavButton = ({ page, icon: Icon, label }) => (
    <button
      onClick={() => setCurrentPage(page)}
      className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
        currentPage === page ? 'bg-blue-500 text-white' : 'text-gray-700 hover:bg-gray-100'
      }`}
    >
      <Icon size={20} />
      <span>{label}</span>
    </button>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <h1 className="text-xl font-bold text-gray-900">Advanced KPI Dashboard</h1>
            <div className="flex space-x-2">
              <NavButton page="home" icon={Home} label="Dashboard" />
              <NavButton page="upload" icon={Upload} label="Data Upload" />
              <NavButton page="employees" icon={Users} label="Employees" />
              <NavButton page="attendance" icon={Calendar} label="Attendance" />
              <NavButton page="analytics" icon={BarChart3} label="Analytics" />
              <NavButton page="settings" icon={Settings} label="Settings" />
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {showKpiMapping && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg max-w-lg w-full mx-4">
              <h3 className="text-lg font-semibold mb-4">Map Data Columns to KPIs</h3>
              <div className="space-y-4">
                {availableKPIs.map(kpi => (
                  <div key={kpi.id} className="border rounded p-4">
                    <div className="flex items-center mb-2">
                      <kpi.icon size={16} className="mr-2" />
                      <h4 className="font-medium">{kpi.name}</h4>
                    </div>
                  </div>
                ))}
              </div>
              <div className="flex justify-end space-x-2 mt-6">
                <button
                  onClick={() => setShowKpiMapping(false)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                  Cancel
                </button>
                <button
                  onClick={() => setShowKpiMapping(false)}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                >
                  Apply Mappings
                </button>
              </div>
            </div>
          </div>
        )}

        {currentPage === 'home' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">Dashboard Overview</h2>
              <div className="flex items-center space-x-3">
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg border transition-colors ${
                    showFilters ? 'bg-blue-500 text-white border-blue-500' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <Filter size={16} />
                  <span>Filters</span>
                </button>
                <button
                  onClick={() => alert('Load Data functionality')}
                  className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors flex items-center"
                >
                  <Download size={16} className="mr-2" />
                  Load Data
                </button>
                <button
                  onClick={() => alert('Save Data functionality')}
                  className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors flex items-center"
                >
                  <Save size={16} className="mr-2" />
                  Save Data
                </button>
              </div>
            </div>

            {showFilters && (
              <div className="bg-white p-6 rounded-lg shadow border">
                <h3 className="text-lg font-semibold mb-4">Advanced Filters</h3>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Time Period</label>
                    <select
                      value={selectedDateRange}
                      onChange={(e) => setSelectedDateRange(e.target.value)}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="last7days">Last 7 Days</option>
                      <option value="last30days">Last 30 Days</option>
                      <option value="last90days">Last 90 Days</option>
                      <option value="thisyear">This Year</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Department</label>
                    <select
                      value={selectedDepartment}
                      onChange={(e) => setSelectedDepartment(e.target.value)}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="all">All Departments</option>
                      {departments.map(dept => (
                        <option key={dept} value={dept}>{dept}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Employee</label>
                    <select
                      value={selectedEmployeeFilter}
                      onChange={(e) => setSelectedEmployeeFilter(e.target.value)}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="all">All Employees</option>
                      {employees.map(employee => (
                        <option key={employee.id} value={employee.id.toString()}>
                          {employee.name} - {employee.department}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="flex items-end">
                    <button
                      onClick={() => {
                        setSelectedEmployeeFilter('all');
                        setSelectedDepartment('all');
                        setSelectedDateRange('last30days');
                      }}
                      className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors w-full"
                    >
                      Clear All Filters
                    </button>
                  </div>
                </div>
              </div>
            )}

            <div className="bg-white p-6 rounded-lg shadow border">
              <h3 className="text-lg font-semibold text-gray-900 mb-6">Configure KPIs</h3>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                
                {/* Select KPIs Section */}
                <div>
                  <h4 className="text-base font-medium text-gray-700 mb-4">Select KPIs</h4>
                  <div className="space-y-3">
                    <select
                      multiple
                      value={selectedKPIs}
                      onChange={(e) => {
                        const values = Array.from(e.target.selectedOptions, option => option.value);
                        setSelectedKPIs(values);
                      }}
                      className="w-full border rounded-lg px-3 py-2 h-48 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      {availableKPIs.map(kpi => (
                        <option key={kpi.id} value={kpi.id} className="p-2">
                          {kpi.name}
                        </option>
                      ))}
                    </select>
                    <p className="text-xs text-gray-500">Hold Ctrl/Cmd to select multiple KPIs</p>
                    
                    {/* Alternative: Individual dropdowns for each KPI */}
                    <div className="mt-4">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Or select KPIs individually:
                      </label>
                      <div className="space-y-2">
                        {availableKPIs.map(kpi => (
                          <label key={kpi.id} className="flex items-center">
                            <input
                              type="checkbox"
                              checked={selectedKPIs.includes(kpi.id)}
                              onChange={(e) => {
                                if (e.target.checked) {
                                  setSelectedKPIs([...selectedKPIs, kpi.id]);
                                } else {
                                  setSelectedKPIs(selectedKPIs.filter(id => id !== kpi.id));
                                }
                              }}
                              className="mr-2"
                            />
                            <kpi.icon size={16} className="mr-2 text-blue-500" />
                            <span className="text-sm">{kpi.name}</span>
                          </label>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Chart Types Section - Updated to Dropdown */}
                <div>
                  <h4 className="text-base font-medium text-gray-700 mb-4">Chart Types</h4>
                  <div className="space-y-4">
                    {selectedKPIs.map(kpiId => {
                      const kpiInfo = availableKPIs.find(k => k.id === kpiId);
                      return (
                        <div key={kpiId} className="flex items-center justify-between p-3 border rounded-lg">
                          <div className="flex items-center">
                            <kpiInfo.icon size={16} className="mr-2 text-gray-600" />
                            <span className="text-sm font-medium text-gray-700">{kpiInfo.name}</span>
                          </div>
                          <select
                            value={chartTypes[kpiId] || 'bar'}
                            onChange={(e) => setChartTypes({...chartTypes, [kpiId]: e.target.value})}
                            className="border rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-w-32"
                          >
                            <option value="bar">Bar Chart</option>
                            <option value="line">Line Chart</option>
                            <option value="pie">Pie Chart</option>
                          </select>
                        </div>
                      );
                    })}
                    
                    {selectedKPIs.length === 0 && (
                      <div className="text-center py-8 text-gray-500">
                        <BarChart3 size={48} className="mx-auto mb-2 opacity-50" />
                        <p>Select KPIs to configure chart types</p>
                      </div>
                    )}
                  </div>
                  
                  {/* Configuration Actions */}
                  <div className="mt-6 flex space-x-3">
                    {dataColumns.length > 0 && (
                      <button
                        onClick={() => setShowKpiMapping(true)}
                        className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors text-sm"
                      >
                        Map Data Columns
                      </button>
                    )}
                    <button
                      onClick={() => alert('KPI settings saved!')}
                      className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors text-sm"
                    >
                      Save Configuration
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-6">
              {selectedKPIs.map(kpiId => {
                const kpi = kpiData[kpiId];
                const kpiInfo = availableKPIs.find(k => k.id === kpiId);
                const targetProgress = (kpi.value / kpi.target) * 100;
                
                return (
                  <div key={kpiId} className="bg-white p-6 rounded-lg shadow-sm border hover:shadow-md transition-shadow">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center">
                        <div className="p-2 rounded-lg bg-blue-50">
                          <kpiInfo.icon className="text-blue-500" size={20} />
                        </div>
                        <div className="ml-3">
                          <h3 className="text-sm font-semibold text-gray-900">{kpiInfo.name}</h3>
                          <p className="text-xs text-gray-500">Target: {kpi.target}{kpi.unit}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <span className={`text-sm font-semibold ${kpi.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {kpi.change >= 0 ? '+' : ''}{kpi.change.toFixed(1)}%
                        </span>
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <p className="text-3xl font-bold text-gray-900 mb-2">
                        {kpi.unit === '$' ? `$${kpi.value.toLocaleString()}` : `${kpi.value}${kpi.unit}`}
                      </p>
                      <div className="w-full bg-gray-200 rounded-full h-1.5">
                        <div 
                          className="bg-blue-500 h-1.5 rounded-full transition-all duration-1000"
                          style={{width: `${Math.min(targetProgress, 100)}%`}}
                        ></div>
                      </div>
                      <p className="text-xs text-gray-500 mt-1">
                        {targetProgress.toFixed(1)}% of target
                      </p>
                    </div>
                    
                    <div className="bg-gray-50 rounded-lg p-4">
                      {renderChart(kpiId, chartTypes[kpiId], kpi)}
                    </div>
                  </div>
                );
              })}
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white p-6 rounded-lg shadow-sm border">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">Top Performers</h3>
                  <span className="text-sm text-gray-500">This Month</span>
                </div>
                <div className="space-y-4">
                  {employees
                    .filter(emp => selectedDepartment === 'all' || emp.department === selectedDepartment)
                    .slice(0, 5)
                    .map((emp, index) => {
                      const performance = 75 + Math.random() * 25;
                      const isTopPerformer = index < 3;
                      
                      return (
                        <div key={emp.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center">
                            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold mr-3 ${
                              isTopPerformer ? 'bg-yellow-500 text-white' : 'bg-gray-400 text-white'
                            }`}>
                              {index + 1}
                            </div>
                            <div className="w-10 h-10 rounded-full bg-gray-300 mr-3 flex items-center justify-center">
                              <span className="text-sm font-bold text-gray-600">{emp.name.charAt(0)}</span>
                            </div>
                            <div>
                              <p className="font-medium text-gray-900">{emp.name}</p>
                              <p className="text-sm text-gray-500">{emp.department}</p>
                            </div>
                          </div>
                          <div className="text-right">
                            <p className="font-semibold text-gray-900">{performance.toFixed(1)}%</p>
                            <div className="w-16 bg-gray-200 rounded-full h-1.5 mt-1">
                              <div 
                                className={`h-1.5 rounded-full ${isTopPerformer ? 'bg-green-500' : 'bg-blue-500'}`}
                                style={{width: `${performance}%`}}
                              ></div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow-sm border">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">Department Overview</h3>
                  <button className="text-sm text-blue-600 hover:text-blue-800">View All</button>
                </div>
                <div className="space-y-4">
                  {departments.map(dept => {
                    const deptEmployees = employees.filter(emp => emp.department === dept);
                    const performance = 70 + Math.random() * 30;
                    const revenue = 20000 + Math.random() * 50000;
                    
                    return (
                      <div key={dept} className="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
                        <div className="flex justify-between items-center mb-3">
                          <div>
                            <h4 className="font-semibold text-gray-900">{dept}</h4>
                            <p className="text-sm text-gray-500">{deptEmployees.length} employees</p>
                          </div>
                          <div className="text-right">
                            <p className="text-sm font-medium text-gray-900">${revenue.toFixed(0)}</p>
                            <p className="text-xs text-gray-500">Revenue</p>
                          </div>
                        </div>
                        <div className="flex items-center justify-between">
                          <div className="flex-1 mr-4">
                            <div className="w-full bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                                style={{width: `${performance}%`}}
                              ></div>
                            </div>
                          </div>
                          <span className="font-semibold text-gray-900">{performance.toFixed(1)}%</span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="bg-white p-4 rounded-lg shadow-sm border text-center">
                <div className="text-2xl font-bold text-blue-600">{employees.length}</div>
                <div className="text-sm text-gray-600">Total Employees</div>
              </div>
              <div className="bg-white p-4 rounded-lg shadow-sm border text-center">
                <div className="text-2xl font-bold text-green-600">
                  {employees.reduce((sum, emp) => {
                    const empAttendance = attendance[emp.id] || {};
                    return sum + Object.values(empAttendance).filter(status => status === 'Present').length;
                  }, 0)}
                </div>
                <div className="text-sm text-gray-600">Present Today</div>
              </div>
              <div className="bg-white p-4 rounded-lg shadow-sm border text-center">
                <div className="text-2xl font-bold text-purple-600">{departments.length}</div>
                <div className="text-sm text-gray-600">Departments</div>
              </div>
              <div className="bg-white p-4 rounded-lg shadow-sm border text-center">
                <div className="text-2xl font-bold text-orange-600">
                  {((selectedKPIs.length / availableKPIs.length) * 100).toFixed(0)}%
                </div>
                <div className="text-sm text-gray-600">KPIs Active</div>
              </div>
            </div>
          </div>
        )}

        {currentPage === 'upload' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">Data Upload & Management</h2>
            
            {uploadedData.length > 0 && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center">
                  <CheckCircle className="text-green-500 mr-3" size={24} />
                  <div>
                    <h3 className="text-sm font-medium text-green-800">Data Successfully Uploaded!</h3>
                    <p className="text-sm text-green-700">{uploadedData.length} rows loaded</p>
                  </div>
                </div>
              </div>
            )}

            <div className="bg-white p-6 rounded-lg shadow">
              <h3 className="text-lg font-semibold mb-4">Upload Data File</h3>
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <label className="cursor-pointer">
                  <span className="text-blue-500 hover:text-blue-600 font-medium">Choose file to upload</span>
                  <input 
                    type="file" 
                    accept=".xlsx,.xls,.csv" 
                    onChange={handleFileUpload}
                    className="hidden" 
                  />
                </label>
                <p className="text-gray-500 mt-2">Supports Excel and CSV files</p>
              </div>
            </div>

            {uploadedData.length > 0 && (
              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-semibold">Data Preview</h3>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-600">
                      Showing {Math.min(10, cleanedData.length)} of {cleanedData.length} rows
                    </span>
                    <button
                      onClick={resetToOriginal}
                      disabled={cleanedData.length === originalData.length}
                      className="bg-gray-500 text-white px-3 py-1 rounded hover:bg-gray-600 disabled:bg-gray-300 text-sm"
                    >
                      Reset to Original
                    </button>
                  </div>
                </div>
                
                {/* Enhanced Data Preview Table */}
                <div className="border border-gray-200 rounded-lg overflow-hidden">
                  {/* Table Header */}
                  <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
                    <div className="flex justify-between items-center">
                      <h4 className="text-sm font-medium text-gray-900 flex items-center">
                        <Database className="mr-2" size={16} />
                        Uploaded Data Preview
                      </h4>
                      <div className="flex items-center space-x-4 text-xs text-gray-600">
                        <span className="bg-white px-2 py-1 rounded border">
                          Columns: {Object.keys(cleanedData[0] || {}).length}
                        </span>
                        <span className="bg-white px-2 py-1 rounded border">
                          Quality: {((cleanedData.length / uploadedData.length) * 100).toFixed(1)}%
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Scrollable Table */}
                  <div className="overflow-x-auto max-h-96">
                    <table className="w-full">
                      <thead className="bg-gray-100 sticky top-0">
                        <tr>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
                            #
                          </th>
                          {Object.keys(cleanedData[0] || {}).map((key, index) => (
                            <th 
                              key={key} 
                              className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200 last:border-r-0"
                            >
                              <div className="flex flex-col">
                                <span className="font-semibold">{key}</span>
                                <span className="text-xs text-gray-400 normal-case">
                                  Col {index + 1}
                                </span>
                              </div>
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {cleanedData.slice(0, 10).map((row, rowIndex) => (
                          <tr key={rowIndex} className="hover:bg-gray-50 transition-colors">
                            <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 border-r border-gray-200 font-medium bg-gray-50">
                              {rowIndex + 1}
                            </td>
                            {Object.values(row).map((value, colIndex) => {
                              const isNumeric = typeof value === 'number';
                              const isEmpty = value === null || value === undefined || value === '';
                              
                              return (
                                <td 
                                  key={colIndex} 
                                  className="px-4 py-3 text-sm border-r border-gray-200 last:border-r-0"
                                >
                                  <div className={`${isNumeric ? 'text-right font-mono' : 'text-left'} ${isEmpty ? 'text-red-400 italic' : 'text-gray-900'}`}>
                                    {isEmpty ? '(empty)' : String(value)}
                                  </div>
                                  {isNumeric && !isEmpty && (
                                    <div className="text-xs text-gray-400">numeric</div>
                                  )}
                                </td>
                              );
                            })}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>

                  {/* Table Footer */}
                  <div className="bg-gray-50 px-4 py-3 border-t border-gray-200">
                    <div className="flex justify-between items-center text-xs text-gray-600">
                      <div className="flex space-x-4">
                        <span>📊 Total Rows: {cleanedData.length}</span>
                        <span>📋 Total Columns: {Object.keys(cleanedData[0] || {}).length}</span>
                        <span>🔄 Last Modified: {new Date().toLocaleTimeString()}</span>
                      </div>
                      <div className="flex space-x-2">
                        <button 
                          onClick={() => alert('Export functionality coming soon!')}
                          className="bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600 transition-colors"
                        >
                          Export Data
                        </button>
                        <button 
                          onClick={() => setCurrentPage('home')}
                          className="bg-green-500 text-white px-3 py-1 rounded text-xs hover:bg-green-600 transition-colors"
                        >
                          Go to Dashboard
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Data Cleaning Tools */}
                <div className="mt-6">
                  <h4 className="text-base font-medium text-gray-700 mb-3">Data Cleaning Tools</h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    <button 
                      onClick={removeEmptyRows}
                      className="flex flex-col items-center justify-center px-4 py-3 bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition-colors"
                    >
                      <AlertCircle size={16} className="mb-1" />
                      <span className="text-sm font-medium">Remove Empty</span>
                    </button>
                    <button 
                      onClick={() => alert('Remove duplicates functionality')}
                      className="flex flex-col items-center justify-center px-4 py-3 bg-green-50 text-green-700 rounded-lg hover:bg-green-100 transition-colors"
                    >
                      <CheckCircle size={16} className="mb-1" />
                      <span className="text-sm font-medium">Remove Duplicates</span>
                    </button>
                    <button 
                      onClick={() => alert('Standardize text functionality')}
                      className="flex flex-col items-center justify-center px-4 py-3 bg-purple-50 text-purple-700 rounded-lg hover:bg-purple-100 transition-colors"
                    >
                      <Edit size={16} className="mb-1" />
                      <span className="text-sm font-medium">Standardize Text</span>
                    </button>
                    <button 
                      onClick={() => alert('Validate data functionality')}
                      className="flex flex-col items-center justify-center px-4 py-3 bg-orange-50 text-orange-700 rounded-lg hover:bg-orange-100 transition-colors"
                    >
                      <Filter size={16} className="mb-1" />
                      <span className="text-sm font-medium">Validate Data</span>
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {currentPage === 'employees' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">Employee Management</h2>
              <div className="flex space-x-3">
                <button
                  onClick={() => setShowAddEmployee(true)}
                  className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 flex items-center"
                >
                  <Plus size={16} className="mr-2" />
                  Add Employee
                </button>
                <label className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 flex items-center cursor-pointer">
                  <Upload size={16} className="mr-2" />
                  Upload Employee File
                  <input
                    type="file"
                    accept=".xlsx,.xls,.csv"
                    onChange={(e) => {
                      const file = e.target.files[0];
                      if (file) {
                        // Sample employee data matching your file structure
                        const bulkEmployeeData = [
                          { 
                            employeeId: 'EMP005',
                            name: 'Alice Johnson', 
                            gender: 'Female',
                            jobTitle: 'Sales Representative',
                            department: 'Sales', 
                            employmentStatus: 'Active',
                            email: 'alice@company.com', 
                            phone: '555-0101', 
                            address: '100 Oak St, City, State',
                            dateOfJoining: '2023-06-15'
                          },
                          { 
                            employeeId: 'EMP006',
                            name: 'Bob Williams', 
                            gender: 'Male',
                            jobTitle: 'Marketing Manager',
                            department: 'Marketing', 
                            employmentStatus: 'Active',
                            email: 'bob@company.com', 
                            phone: '555-0102', 
                            address: '200 Pine St, City, State',
                            dateOfJoining: '2022-09-01'
                          },
                          { 
                            employeeId: 'EMP007',
                            name: 'Carol Davis', 
                            gender: 'Female',
                            jobTitle: 'Software Engineer',
                            department: 'IT', 
                            employmentStatus: 'Active',
                            email: 'carol@company.com', 
                            phone: '555-0103', 
                            address: '300 Elm St, City, State',
                            dateOfJoining: '2021-11-20'
                          },
                          { 
                            employeeId: 'EMP008',
                            name: 'Daniel Garcia', 
                            gender: 'Male',
                            jobTitle: 'HR Specialist',
                            department: 'HR', 
                            employmentStatus: 'Active',
                            email: 'daniel@company.com', 
                            phone: '555-0104', 
                            address: '400 Maple St, City, State',
                            dateOfJoining: '2023-01-10'
                          },
                          { 
                            employeeId: 'EMP009',
                            name: 'Emily Martinez', 
                            gender: 'Female',
                            jobTitle: 'Financial Analyst',
                            department: 'Finance', 
                            employmentStatus: 'Active',
                            email: 'emily@company.com', 
                            phone: '555-0105', 
                            address: '500 Cedar St, City, State',
                            dateOfJoining: '2022-04-05'
                          }
                        ];
                        
                        // Add bulk employees with unique IDs
                        const newEmployees = bulkEmployeeData.map(emp => ({
                          ...emp,
                          id: Math.max(...employees.map(e => e.id), 0) + Math.floor(Math.random() * 1000) + 1,
                          image: null
                        }));
                        
                        setEmployees([...employees, ...newEmployees]);
                        alert(`✅ Successfully imported ${bulkEmployeeData.length} employees from ${file.name}!`);
                      }
                    }}
                    className="hidden"
                  />
                </label>
              </div>
            </div>

            {/* Add Employee Modal with Image Upload */}
            {showAddEmployee && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4 max-h-screen overflow-y-auto">
                  <h3 className="text-lg font-semibold mb-4">Add New Employee</h3>
                  <div className="space-y-4">
                    {/* Image Upload Section */}
                    <div className="text-center">
                      <div className="w-24 h-24 rounded-full bg-gray-300 mx-auto mb-3 overflow-hidden">
                        {newEmployee.image ? (
                          <img src={newEmployee.image} alt="Preview" className="w-full h-full object-cover" />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-gray-500">
                            <Users size={32} />
                          </div>
                        )}
                      </div>
                      <label className="cursor-pointer bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition-colors">
                        Upload Photo
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => handleImageUpload(e.target.files[0], false)}
                          className="hidden"
                        />
                      </label>
                    </div>

                    <input
                      type="text"
                      placeholder="Full Name *"
                      value={newEmployee.name}
                      onChange={(e) => setNewEmployee({ ...newEmployee, name: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                      required
                    />
                    <select
                      value={newEmployee.gender}
                      onChange={(e) => setNewEmployee({ ...newEmployee, gender: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Select Gender</option>
                      <option value="Male">Male</option>
                      <option value="Female">Female</option>
                      <option value="Other">Other</option>
                    </select>
                    <input
                      type="text"
                      placeholder="Job Title"
                      value={newEmployee.jobTitle}
                      onChange={(e) => setNewEmployee({ ...newEmployee, jobTitle: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    />
                    <select
                      value={newEmployee.department}
                      onChange={(e) => setNewEmployee({ ...newEmployee, department: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Select Department</option>
                      <option value="Sales">Sales</option>
                      <option value="Marketing">Marketing</option>
                      <option value="IT">IT</option>
                      <option value="HR">HR</option>
                      <option value="Finance">Finance</option>
                      <option value="Operations">Operations</option>
                    </select>
                    <select
                      value={newEmployee.employmentStatus}
                      onChange={(e) => setNewEmployee({ ...newEmployee, employmentStatus: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Select Employment Status</option>
                      <option value="Active">Active</option>
                      <option value="Inactive">Inactive</option>
                      <option value="On Leave">On Leave</option>
                      <option value="Terminated">Terminated</option>
                    </select>
                    <input
                      type="email"
                      placeholder="Email Address"
                      value={newEmployee.email}
                      onChange={(e) => setNewEmployee({ ...newEmployee, email: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    />
                    <input
                      type="tel"
                      placeholder="Phone Number"
                      value={newEmployee.phone}
                      onChange={(e) => setNewEmployee({ ...newEmployee, phone: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    />
                    <textarea
                      placeholder="Address"
                      value={newEmployee.address}
                      onChange={(e) => setNewEmployee({ ...newEmployee, address: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 h-20 focus:ring-2 focus:ring-blue-500"
                    />
                    <input
                      type="date"
                      placeholder="Date of Joining"
                      value={newEmployee.dateOfJoining}
                      onChange={(e) => setNewEmployee({ ...newEmployee, dateOfJoining: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div className="flex justify-end space-x-2 mt-6">
                    <button
                      onClick={() => {
                        setShowAddEmployee(false);
                        setNewEmployee({ 
                          name: '', 
                          gender: '', 
                          jobTitle: '', 
                          department: '', 
                          employmentStatus: '', 
                          email: '', 
                          phone: '', 
                          address: '', 
                          dateOfJoining: '', 
                          image: null 
                        });
                      }}
                      className="px-4 py-2 text-gray-600 hover:text-gray-800"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={() => addEmployee(newEmployee)}
                      disabled={!newEmployee.name.trim()}
                      className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 transition-colors"
                    >
                      Add Employee
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Edit Employee Modal with Image Upload */}
            {editingEmployee && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4 max-h-screen overflow-y-auto">
                  <h3 className="text-lg font-semibold mb-4">Edit Employee</h3>
                  <div className="space-y-4">
                    {/* Image Upload Section */}
                    <div className="text-center">
                      <div className="w-24 h-24 rounded-full bg-gray-300 mx-auto mb-3 overflow-hidden">
                        {editingEmployee.image ? (
                          <img src={editingEmployee.image} alt="Preview" className="w-full h-full object-cover" />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-gray-500 text-xl font-bold">
                            {editingEmployee.name.charAt(0).toUpperCase()}
                          </div>
                        )}
                      </div>
                      <label className="cursor-pointer bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition-colors">
                        Change Photo
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => handleImageUpload(e.target.files[0], true)}
                          className="hidden"
                        />
                      </label>
                    </div>

                    <input
                      type="text"
                      placeholder="Full Name *"
                      value={editingEmployee.name}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, name: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    />
                    <select
                      value={editingEmployee.gender}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, gender: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Select Gender</option>
                      <option value="Male">Male</option>
                      <option value="Female">Female</option>
                      <option value="Other">Other</option>
                    </select>
                    <input
                      type="text"
                      placeholder="Job Title"
                      value={editingEmployee.jobTitle}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, jobTitle: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    />
                    <select
                      value={editingEmployee.department}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, department: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Select Department</option>
                      <option value="Sales">Sales</option>
                      <option value="Marketing">Marketing</option>
                      <option value="IT">IT</option>
                      <option value="HR">HR</option>
                      <option value="Finance">Finance</option>
                      <option value="Operations">Operations</option>
                    </select>
                    <select
                      value={editingEmployee.employmentStatus}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, employmentStatus: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Select Employment Status</option>
                      <option value="Active">Active</option>
                      <option value="Inactive">Inactive</option>
                      <option value="On Leave">On Leave</option>
                      <option value="Terminated">Terminated</option>
                    </select>
                    <input
                      type="email"
                      placeholder="Email Address"
                      value={editingEmployee.email}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, email: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    />
                    <input
                      type="tel"
                      placeholder="Phone Number"
                      value={editingEmployee.phone}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, phone: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    />
                    <textarea
                      placeholder="Address"
                      value={editingEmployee.address}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, address: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 h-20 focus:ring-2 focus:ring-blue-500"
                    />
                    <input
                      type="date"
                      placeholder="Date of Joining"
                      value={editingEmployee.dateOfJoining}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, dateOfJoining: e.target.value })}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div className="flex justify-end space-x-2 mt-6">
                    <button
                      onClick={() => setEditingEmployee(null)}
                      className="px-4 py-2 text-gray-600 hover:text-gray-800"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={() => updateEmployee(editingEmployee.id, editingEmployee)}
                      disabled={!editingEmployee.name.trim()}
                      className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 transition-colors"
                    >
                      Save Changes
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Enhanced Employee Cards Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {employees.map(employee => {
                const empAttendance = attendance[employee.id] || {};
                const presentDays = Object.values(empAttendance).filter(status => status === 'Present').length;
                const attendanceRate = ((presentDays / 7) * 100).toFixed(1);
                const performance = (75 + Math.random() * 25).toFixed(1);
                
                return (
                  <div key={employee.id} className="bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow p-6">
                    <div className="flex items-center mb-4">
                      <div className="w-16 h-16 rounded-full bg-gray-300 mr-4 overflow-hidden flex-shrink-0">
                        {employee.image ? (
                          <img src={employee.image} alt={employee.name} className="w-full h-full object-cover" />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-gray-500 text-xl font-bold">
                            {employee.name.charAt(0).toUpperCase()}
                          </div>
                        )}
                      </div>
                      <div className="flex-1 min-w-0">
                        <h3 className="font-semibold text-lg text-gray-900 truncate">{employee.name}</h3>
                        <p className="text-sm text-gray-600 truncate">{employee.position}</p>
                        <p className="text-xs text-gray-500">{employee.department}</p>
                      </div>
                    </div>
                    
                    {/* Employee Details */}
                    <div className="space-y-3 mb-4">
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-600">Email</span>
                        <span className="text-sm font-medium text-gray-900 truncate ml-2">{employee.email}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-600">Phone</span>
                        <span className="text-sm font-medium text-gray-900">{employee.phone}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-600">Attendance Rate</span>
                        <span className="text-sm font-medium text-gray-900">{attendanceRate}%</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-green-500 h-2 rounded-full transition-all duration-500"
                          style={{width: `${attendanceRate}%`}}
                        ></div>
                      </div>
                      
                      <div className="flex justify-between items-center pt-2">
                        <span className="text-sm text-gray-600">Performance</span>
                        <span className="text-sm font-medium text-gray-900">{performance}%</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                          style={{width: `${performance}%`}}
                        ></div>
                      </div>
                    </div>
                    
                    {/* Action Buttons */}
                    <div className="flex justify-between pt-4 border-t border-gray-200">
                      <button
                        onClick={() => setEditingEmployee({...employee})}
                        className="flex items-center text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors"
                      >
                        <Edit size={14} className="mr-1" />
                        Edit
                      </button>
                      <button
                        onClick={() => deleteEmployee(employee.id)}
                        className="flex items-center text-red-600 hover:text-red-800 text-sm font-medium transition-colors"
                      >
                        <Trash2 size={14} className="mr-1" />
                        Delete
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>

            {/* Empty State */}
            {employees.length === 0 && (
              <div className="text-center py-12">
                <Users size={64} className="mx-auto text-gray-400 mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 mb-2">No Employees Found</h3>
                <p className="text-gray-600 mb-4">Get started by adding your first employee or uploading an employee file.</p>
                <div className="flex justify-center space-x-3">
                  <button
                    onClick={() => setShowAddEmployee(true)}
                    className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
                  >
                    Add Employee
                  </button>
                </div>
              </div>
            )}
          </div>
        )}

        {currentPage === 'attendance' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">Attendance Management</h2>
            
            <div className="bg-white rounded-lg shadow overflow-hidden">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left">Employee</th>
                    {weekDays.map(day => (
                      <th key={day} className="px-6 py-3 text-left">
                        {day.charAt(0).toUpperCase() + day.slice(1, 3)}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {employees.map(employee => (
                    <tr key={employee.id}>
                      <td className="px-6 py-4">
                        <div className="flex items-center">
                          <div className="w-10 h-10 rounded-full bg-gray-300 mr-3 flex items-center justify-center">
                            <span className="text-sm font-bold">{employee.name.charAt(0)}</span>
                          </div>
                          <div>
                            <p className="font-medium">{employee.name}</p>
                            <p className="text-sm text-gray-500">{employee.department}</p>
                          </div>
                        </div>
                      </td>
                      {weekDays.map(day => {
                        const status = attendance[employee.id]?.[day] || 'Present';
                        return (
                          <td key={day} className="px-6 py-4">
                            <select
                              value={status}
                              onChange={(e) => updateAttendance(employee.id, day, e.target.value)}
                              className="text-xs px-2 py-1 rounded border"
                            >
                              {attendanceOptions.map(option => (
                                <option key={option} value={option}>{option}</option>
                              ))}
                            </select>
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {currentPage === 'analytics' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">Advanced Analytics</h2>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-4">Performance Trends</h3>
                <div className="h-64 bg-gray-50 rounded-lg flex items-center justify-center">
                  <p className="text-gray-500">Performance trend chart</p>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-4">Department Overview</h3>
                <div className="space-y-4">
                  {departments.map(dept => {
                    const deptEmployees = employees.filter(emp => emp.department === dept);
                    const performance = 75 + Math.random() * 25;
                    
                    return (
                      <div key={dept} className="border rounded-lg p-4">
                        <div className="flex justify-between items-center mb-2">
                          <h4 className="font-medium">{dept}</h4>
                          <span className="text-sm text-gray-500">{deptEmployees.length} employees</span>
                        </div>
                        <div className="flex items-center">
                          <div className="flex-1 mr-4">
                            <div className="w-full bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-blue-500 h-2 rounded-full"
                                style={{width: `${performance}%`}}
                              ></div>
                            </div>
                          </div>
                          <span className="font-medium">{performance.toFixed(1)}%</span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        )}

        {currentPage === 'settings' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">Settings & Configuration</h2>
            
            <div className="bg-white p-6 rounded-lg shadow">
              <h3 className="text-lg font-semibold mb-4">Google Sheets Integration</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Google Sheets API Key
                  </label>
                  <input
                    type="password"
                    placeholder="Enter your Google API key"
                    value={googleConfig.apiKey}
                    onChange={(e) => setGoogleConfig({...googleConfig, apiKey: e.target.value})}
                    className="w-full border rounded-lg px-3 py-2"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Spreadsheet ID
                  </label>
                  <input
                    type="text"
                    placeholder="Enter your Google Sheets ID"
                    value={googleConfig.spreadsheetId}
                    onChange={(e) => setGoogleConfig({...googleConfig, spreadsheetId: e.target.value})}
                    className="w-full border rounded-lg px-3 py-2"
                  />
                </div>
                <button
                  onClick={() => {
                    if (googleConfig.apiKey && googleConfig.spreadsheetId) {
                      setGoogleConfig({...googleConfig, isConfigured: true});
                      alert('Google Sheets configured!');
                    } else {
                      alert('Please fill in both fields');
                    }
                  }}
                  className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
                >
                  Configure Integration
                </button>
              </div>

              {googleConfig.isConfigured && (
                <div className="mt-6 pt-6 border-t">
                  <div className="flex items-center text-green-600 mb-4">
                    <CheckCircle size={20} className="mr-2" />
                    <span>Google Sheets integration is active</span>
                  </div>
                  <div className="space-y-2">
                    <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 mr-2">
                      Load Data from Sheets
                    </button>
                    <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">
                      Save Data to Sheets
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
