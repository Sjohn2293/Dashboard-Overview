import React, { useState, useEffect } from 'react';
import { Upload, Home, Users, Calendar, BarChart3, PieChart, LineChart, TrendingUp, Edit, Trash2, Plus, Save, Filter, Download, Settings, Database } from 'lucide-react';
import * as XLSX from 'xlsx';

const Dashboard = () => {
  const [currentPage, setCurrentPage] = useState('home');
  const [uploadedData, setUploadedData] = useState([]);
  const [cleanedData, setCleanedData] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [attendance, setAttendance] = useState({});
  const [selectedKPIs, setSelectedKPIs] = useState(['revenue', 'employees', 'productivity']);
  const [chartTypes, setChartTypes] = useState({
    revenue: 'bar',
    employees: 'pie',
    productivity: 'line'
  });
  const [editingEmployee, setEditingEmployee] = useState(null);
  const [showAddEmployee, setShowAddEmployee] = useState(false);
  const [newEmployee, setNewEmployee] = useState({
    name: '',
    department: '',
    position: '',
    email: '',
    phone: '',
    homeAddress: '',
    image: null
  });
  
  // Google Sheets Configuration
  const [googleConfig, setGoogleConfig] = useState({
    spreadsheetId: '',
    apiKey: '',
    isConfigured: false
  });
  const [showGoogleConfig, setShowGoogleConfig] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [lastSyncTime, setLastSyncTime] = useState(null);

  // Google Sheets API Functions
  const saveToGoogleSheets = async (sheetName, data, range = 'A1') => {
    if (!googleConfig.isConfigured) {
      alert('Please configure Google Sheets integration first');
      return false;
    }

    try {
      setIsLoading(true);
      const url = `https://sheets.googleapis.com/v4/spreadsheets/${googleConfig.spreadsheetId}/values/${sheetName}!${range}:clear?key=${googleConfig.apiKey}`;
      
      // Clear existing data
      await fetch(url, { method: 'POST' });

      // Add new data
      const updateUrl = `https://sheets.googleapis.com/v4/spreadsheets/${googleConfig.spreadsheetId}/values/${sheetName}!${range}?valueInputOption=USER_ENTERED&key=${googleConfig.apiKey}`;
      
      const response = await fetch(updateUrl, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ values: data })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      setLastSyncTime(new Date().toLocaleTimeString());
      return true;
    } catch (error) {
      console.error('Error saving to Google Sheets:', error);
      alert('Error saving to Google Sheets. Please check your configuration.');
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const loadFromGoogleSheets = async (sheetName, range = 'A1:Z1000') => {
    if (!googleConfig.isConfigured) return [];

    try {
      setIsLoading(true);
      const url = `https://sheets.googleapis.com/v4/spreadsheets/${googleConfig.spreadsheetId}/values/${sheetName}!${range}?key=${googleConfig.apiKey}`;
      
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data.values || [];
    } catch (error) {
      console.error('Error loading from Google Sheets:', error);
      return [];
    } finally {
      setIsLoading(false);
    }
  };

  // Save all data to Google Sheets
  const saveAllData = async () => {
    if (!googleConfig.isConfigured) {
      setShowGoogleConfig(true);
      return;
    }

    try {
      setIsLoading(true);
      
      // Prepare employees data
      const employeeHeaders = ['ID', 'Name', 'Department', 'Position', 'Email', 'Phone', 'Home Address', 'Image'];
      const employeeRows = employees.map(emp => [
        emp.id,
        emp.name,
        emp.department,
        emp.position,
        emp.email,
        emp.phone,
        emp.homeAddress,
        emp.image || ''
      ]);
      const employeeData = [employeeHeaders, ...employeeRows];

      // Prepare attendance data
      const attendanceHeaders = ['Employee ID', 'Employee Name', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const attendanceRows = employees.map(emp => {
        const empAttendance = attendance[emp.id] || {};
        return [
          emp.id,
          emp.name,
          empAttendance.sunday || 'Present',
          empAttendance.monday || 'Present',
          empAttendance.tuesday || 'Present',
          empAttendance.wednesday || 'Present',
          empAttendance.thursday || 'Present',
          empAttendance.friday || 'Present',
          empAttendance.saturday || 'Absent'
        ];
      });
      const attendanceData = [attendanceHeaders, ...attendanceRows];

      // Prepare settings data
      const settingsData = [
        ['Setting', 'Value'],
        ['Selected KPIs', JSON.stringify(selectedKPIs)],
        ['Chart Types', JSON.stringify(chartTypes)],
        ['Last Updated', new Date().toISOString()]
      ];

      // Save to different sheets
      const success1 = await saveToGoogleSheets('Employees', employeeData);
      const success2 = await saveToGoogleSheets('Attendance', attendanceData);
      const success3 = await saveToGoogleSheets('Settings', settingsData);

      if (success1 && success2 && success3) {
        alert('✅ All data saved to Google Sheets successfully!');
      }
    } catch (error) {
      console.error('Error saving all data:', error);
      alert('❌ Error saving data to Google Sheets');
    } finally {
      setIsLoading(false);
    }
  };

  // Load all data from Google Sheets
  const loadAllData = async () => {
    if (!googleConfig.isConfigured) {
      setShowGoogleConfig(true);
      return;
    }

    try {
      setIsLoading(true);
      
      // Load employees
      const employeeData = await loadFromGoogleSheets('Employees');
      if (employeeData.length > 1) {
        const employeeRows = employeeData.slice(1); // Skip header
        const loadedEmployees = employeeRows.map(row => ({
          id: parseInt(row[0]) || Math.random(),
          name: row[1] || '',
          department: row[2] || '',
          position: row[3] || '',
          email: row[4] || '',
          phone: row[5] || '',
          homeAddress: row[6] || '',
          image: row[7] || null
        })).filter(emp => emp.name); // Filter out empty rows
        
        setEmployees(loadedEmployees);
      }

      // Load attendance
      const attendanceData = await loadFromGoogleSheets('Attendance');
      if (attendanceData.length > 1) {
        const attendanceRows = attendanceData.slice(1); // Skip header
        const loadedAttendance = {};
        attendanceRows.forEach(row => {
          const empId = parseInt(row[0]);
          if (empId) {
            loadedAttendance[empId] = {
              sunday: row[2] || 'Present',
              monday: row[3] || 'Present',
              tuesday: row[4] || 'Present',
              wednesday: row[5] || 'Present',
              thursday: row[6] || 'Present',
              friday: row[7] || 'Present',
              saturday: row[8] || 'Absent'
            };
          }
        });
        setAttendance(loadedAttendance);
      }

      // Load settings
      const settingsData = await loadFromGoogleSheets('Settings');
      if (settingsData.length > 1) {
        settingsData.slice(1).forEach(row => {
          if (row[0] === 'Selected KPIs' && row[1]) {
            try {
              setSelectedKPIs(JSON.parse(row[1]));
            } catch (e) {
              console.error('Error parsing selected KPIs:', e);
            }
          }
          if (row[0] === 'Chart Types' && row[1]) {
            try {
              setChartTypes(JSON.parse(row[1]));
            } catch (e) {
              console.error('Error parsing chart types:', e);
            }
          }
        });
      }

      setLastSyncTime(new Date().toLocaleTimeString());
      alert('✅ Data loaded from Google Sheets successfully!');
    } catch (error) {
      console.error('Error loading data:', error);
      alert('❌ Error loading data from Google Sheets');
    } finally {
      setIsLoading(false);
    }
  };

  // Calculate KPIs from uploaded data with employee filter
  const calculateKPIsFromData = () => {
    if (cleanedData.length === 0) {
      // Use employee count as fallback
      setKpiData(prev => ({
        ...prev,
        employees: { 
          value: selectedEmployeeFilter === 'all' ? employees.length : 1, 
          change: 5.2, 
          data: selectedEmployeeFilter === 'all' 
            ? [employees.length - 4, employees.length - 3, employees.length - 2, employees.length - 1, employees.length] 
            : [1, 1, 1, 1, 1]
        }
      }));
      return;
    }

    // Filter data by employee if selected
    let filteredData = cleanedData;
    if (selectedEmployeeFilter !== 'all') {
      const selectedEmployee = employees.find(emp => emp.id.toString() === selectedEmployeeFilter);
      if (selectedEmployee) {
        // Try to match by name, email, or ID in the data
        filteredData = cleanedData.filter(row => {
          return Object.values(row).some(value => 
            String(value).toLowerCase().includes(selectedEmployee.name.toLowerCase()) ||
            String(value).toLowerCase().includes(selectedEmployee.email.toLowerCase()) ||
            String(value) === selectedEmployee.id.toString()
          );
        });
      }
    }

    const newKpiData = { ...kpiData };

    Object.keys(kpiMappings).forEach(kpiKey => {
      const mapping = kpiMappings[kpiKey];
      if (mapping && mapping.column && filteredData.length > 0) {
        const columnData = filteredData
          .map(row => {
            const value = row[mapping.column];
            return typeof value === 'number' ? value : parseFloat(value) || 0;
          })
          .filter(val => !isNaN(val));

        if (columnData.length > 0) {
          let calculatedValue;
          switch (mapping.type) {
            case 'sum':
              calculatedValue = columnData.reduce((sum, val) => sum + val, 0);
              break;
            case 'average':
              calculatedValue = columnData.reduce((sum, val) => sum + val, 0) / columnData.length;
              break;
            case 'count':
              calculatedValue = columnData.length;
              break;
            case 'max':
              calculatedValue = Math.max(...columnData);
              break;
            case 'min':
              calculatedValue = Math.min(...columnData);
              break;
            default:
              calculatedValue = columnData[columnData.length - 1];
          }

          // Generate trend data (last 5 periods)
          const trendData = columnData.length >= 5 
            ? columnData.slice(-5)
            : [...Array(5 - columnData.length).fill(calculatedValue * 0.8), ...columnData];

          // Calculate change percentage
          const previousValue = trendData[trendData.length - 2] || calculatedValue;
          const change = previousValue !== 0 ? ((calculatedValue - previousValue) / previousValue) * 100 : 0;

          newKpiData[kpiKey] = {
            value: calculatedValue,
            change: change,
            data: trendData
          };
        }
      }
    });

    // Update employee count based on filter
    if (selectedEmployeeFilter === 'all') {
      newKpiData.employees = {
        value: employees.length,
        change: 5.2,
        data: [employees.length - 4, employees.length - 3, employees.length - 2, employees.length - 1, employees.length].map(v => Math.max(0, v))
      };
    } else {
      newKpiData.employees = {
        value: 1,
        change: 0,
        data: [1, 1, 1, 1, 1]
      };
    }

    setKpiData(newKpiData);
  };

  // Load data on component mount
  useEffect(() => {
    // Try to load saved Google config from localStorage if available
    try {
      const savedConfig = localStorage.getItem('googleSheetsConfig');
      if (savedConfig) {
        const config = JSON.parse(savedConfig);
        setGoogleConfig(config);
        if (config.isConfigured) {
          loadAllData();
        }
      }
    } catch (error) {
      // localStorage not available, use default sample data
      setEmployees([
        { id: 1, name: 'John Doe', department: 'Sales', position: 'Manager', email: 'john@company.com', phone: '123-456-7890', homeAddress: '123 Main St, City, State 12345', image: null },
        { id: 2, name: 'Jane Smith', department: 'Marketing', position: 'Specialist', email: 'jane@company.com', phone: '098-765-4321', homeAddress: '456 Oak Ave, City, State 67890', image: null },
        { id: 3, name: 'Mike Johnson', department: 'IT', position: 'Developer', email: 'mike@company.com', phone: '555-123-4567', homeAddress: '789 Pine Rd, City, State 11111', image: null }
      ]);
    }
  }, []);

  // Initialize attendance data
  useEffect(() => {
    const initAttendance = {};
    employees.forEach(emp => {
      initAttendance[emp.id] = {
        sunday: 'Present',
        monday: 'Present',
        tuesday: 'Present',
        wednesday: 'Present',
        thursday: 'Present',
        friday: 'Present',
        saturday: 'Absent'
      };
    });
    setAttendance(initAttendance);
  }, [employees]);

  const [dataColumns, setDataColumns] = useState([]);
  const [kpiMappings, setKpiMappings] = useState({
    revenue: { column: '', type: 'sum' },
    employees: { column: '', type: 'count' },
    productivity: { column: '', type: 'average' },
    satisfaction: { column: '', type: 'average' }
  });
  const [showKpiMapping, setShowKpiMapping] = useState(false);
  const [selectedEmployeeFilter, setSelectedEmployeeFilter] = useState('all');
  const [showFilters, setShowFilters] = useState(false);
  
  // Sample KPI data - will be replaced by uploaded data
  const [kpiData, setKpiData] = useState({
    revenue: { value: 125000, change: 12.5, data: [100000, 110000, 105000, 115000, 125000] },
    employees: { value: 0, change: 0, data: [0, 0, 0, 0, 0] },
    productivity: { value: 87.5, change: -2.1, data: [85, 88, 90, 89, 87.5] },
    satisfaction: { value: 4.2, change: 8.3, data: [3.8, 4.0, 4.1, 4.0, 4.2] }
  });

  const availableKPIs = [
    { id: 'revenue', name: 'Revenue', icon: TrendingUp },
    { id: 'employees', name: 'Employee Count', icon: Users },
    { id: 'productivity', name: 'Productivity', icon: BarChart3 },
    { id: 'satisfaction', name: 'Satisfaction', icon: TrendingUp }
  ];

  const chartOptions = [
    { id: 'bar', name: 'Bar Chart', icon: BarChart3 },
    { id: 'line', name: 'Line Chart', icon: LineChart },
    { id: 'pie', name: 'Pie Chart', icon: PieChart }
  ];

  const attendanceOptions = ['Present', 'Absent', 'Late', 'Half Day', 'Sick Leave', 'Vacation'];
  const weekDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];

  // File upload handler
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet);
          setUploadedData(jsonData);
          setCleanedData(jsonData);
        } catch (error) {
          alert('Error reading file. Please ensure it\'s a valid Excel file.');
        }
      };
      reader.readAsArrayBuffer(file);
    }
  };

  // Data cleaning functions
  const removeEmptyRows = () => {
    const cleaned = cleanedData.filter(row => 
      Object.values(row).some(value => value !== null && value !== undefined && value !== '')
    );
    setCleanedData(cleaned);
  };

  const removeDuplicates = () => {
    const unique = cleanedData.filter((row, index, self) =>
      index === self.findIndex(r => JSON.stringify(r) === JSON.stringify(row))
    );
    setCleanedData(unique);
  };

  const standardizeText = () => {
    const standardized = cleanedData.map(row => {
      const newRow = {};
      Object.keys(row).forEach(key => {
        if (typeof row[key] === 'string') {
          newRow[key] = row[key].trim().toLowerCase();
        } else {
          newRow[key] = row[key];
        }
      });
      return newRow;
    });
    setCleanedData(standardized);
  };

  // Employee management functions
  const addEmployee = async (employeeData) => {
    const id = Math.max(...employees.map(e => e.id), 0) + 1;
    const newEmp = { ...employeeData, id };
    setEmployees([...employees, newEmp]);
    setNewEmployee({
      name: '',
      department: '',
      position: '',
      email: '',
      phone: '',
      homeAddress: '',
      image: null
    });
    setShowAddEmployee(false);
    
    // Auto-save will trigger via useEffect
  };

  const updateEmployee = async (id, updatedEmployee) => {
    setEmployees(employees.map(emp => emp.id === id ? { ...emp, ...updatedEmployee } : emp));
    setEditingEmployee(null);
    
    // Auto-save will trigger via useEffect
  };

  const deleteEmployee = async (id) => {
    if (window.confirm('Are you sure you want to delete this employee?')) {
      setEmployees(employees.filter(emp => emp.id !== id));
      
      // Remove from attendance as well
      const newAttendance = { ...attendance };
      delete newAttendance[id];
      setAttendance(newAttendance);
    }
  };

  const handleImageUpload = (file, isEditing = false) => {
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imageData = e.target.result;
        if (isEditing && editingEmployee) {
          setEditingEmployee({ ...editingEmployee, image: imageData });
        } else {
          setNewEmployee({ ...newEmployee, image: imageData });
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const updateAttendance = (employeeId, day, status) => {
    setAttendance(prev => ({
      ...prev,
      [employeeId]: {
        ...prev[employeeId],
        [day]: status
      }
    }));
  };

  // Chart rendering function
  const renderChart = (kpiId, type, data) => {
    const chartData = data.data || [];
    const maxValue = Math.max(...chartData);
    
    if (type === 'bar') {
      return (
        <div className="flex items-end justify-between h-32 bg-gray-50 p-4 rounded">
          {chartData.map((value, index) => (
            <div key={index} className="flex flex-col items-center">
              <div 
                className="bg-blue-500 w-8 rounded-t"
                style={{ height: `${(value / maxValue) * 100}px` }}
              ></div>
              <span className="text-xs mt-1">{index + 1}</span>
            </div>
          ))}
        </div>
      );
    } else if (type === 'line') {
      return (
        <div className="h-32 bg-gray-50 p-4 rounded relative">
          <svg className="w-full h-full">
            <polyline
              fill="none"
              stroke="#3B82F6"
              strokeWidth="2"
              points={chartData.map((value, index) => 
                `${(index / (chartData.length - 1)) * 280},${120 - (value / maxValue) * 80}`
              ).join(' ')}
            />
          </svg>
        </div>
      );
    } else if (type === 'pie') {
      return (
        <div className="h-32 bg-gray-50 p-4 rounded flex items-center justify-center">
          <div className="w-24 h-24 rounded-full bg-gradient-to-r from-blue-500 to-green-500"></div>
        </div>
      );
    }
  };

  // Navigation
  const NavButton = ({ page, icon: Icon, label }) => (
    <button
      onClick={() => setCurrentPage(page)}
      className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
        currentPage === page ? 'bg-blue-500 text-white' : 'text-gray-700 hover:bg-gray-100'
      }`}
    >
      <Icon size={20} />
      <span>{label}</span>
    </button>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Navigation */}
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <h1 className="text-xl font-bold text-gray-900">Employee & KPI Dashboard</h1>
            <div className="flex space-x-2">
              <NavButton page="home" icon={Home} label="Home" />
              <NavButton page="upload" icon={Upload} label="Data Upload" />
              <NavButton page="employees" icon={Users} label="Employees" />
              <NavButton page="attendance" icon={Calendar} label="Attendance" />
              <button
                onClick={() => setShowGoogleConfig(true)}
                className="flex items-center space-x-2 px-4 py-2 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors"
              >
                <Database size={20} />
                <span>Settings</span>
              </button>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* KPI Mapping Modal */}
        {showKpiMapping && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg max-w-lg w-full mx-4 max-h-screen overflow-y-auto">
              <h3 className="text-lg font-semibold mb-4">Map Data Columns to KPIs</h3>
              <div className="space-y-4">
                {availableKPIs.map(kpi => (
                  <div key={kpi.id} className="border rounded p-4">
                    <div className="flex items-center mb-2">
                      <kpi.icon size={16} className="mr-2" />
                      <h4 className="font-medium">{kpi.name}</h4>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">Data Column</label>
                        <select
                          value={kpiMappings[kpi.id]?.column || ''}
                          onChange={(e) => setKpiMappings({
                            ...kpiMappings,
                            [kpi.id]: { ...kpiMappings[kpi.id], column: e.target.value }
                          })}
                          className="w-full border rounded px-2 py-1 text-sm"
                        >
                          <option value="">Select Column</option>
                          {dataColumns.map(col => (
                            <option key={col} value={col}>{col}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">Calculation</label>
                        <select
                          value={kpiMappings[kpi.id]?.type || 'sum'}
                          onChange={(e) => setKpiMappings({
                            ...kpiMappings,
                            [kpi.id]: { ...kpiMappings[kpi.id], type: e.target.value }
                          })}
                          className="w-full border rounded px-2 py-1 text-sm"
                        >
                          <option value="sum">Sum</option>
                          <option value="average">Average</option>
                          <option value="count">Count</option>
                          <option value="max">Maximum</option>
                          <option value="min">Minimum</option>
                        </select>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="bg-blue-50 p-3 rounded mt-4 text-sm">
                <p className="font-medium mb-1">Instructions:</p>
                <ul className="text-xs space-y-1">
                  <li>• Select which column from your uploaded data corresponds to each KPI</li>
                  <li>• Choose how to calculate the value (sum, average, count, etc.)</li>
                  <li>• Revenue typically uses "Sum" of sales/revenue columns</li>
                  <li>• Productivity/Satisfaction typically use "Average"</li>
                  <li>• Employee count will automatically use your employee database</li>
                </ul>
              </div>
              <div className="flex justify-end space-x-2 mt-6">
                <button
                  onClick={() => setShowKpiMapping(false)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                  Cancel
                </button>
                <button
                  onClick={() => {
                    calculateKPIsFromData();
                    setShowKpiMapping(false);
                    alert('✅ KPI mappings updated! Your dashboard now shows data from your uploaded file.');
                  }}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                >
                  Apply Mappings
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Google Sheets Configuration Modal */}
        {showGoogleConfig && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4">
              <h3 className="text-lg font-semibold mb-4">Google Sheets Integration Setup</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Google Sheets API Key
                  </label>
                  <input
                    type="text"
                    placeholder="Enter your Google API key"
                    value={googleConfig.apiKey}
                    onChange={(e) => setGoogleConfig({...googleConfig, apiKey: e.target.value})}
                    className="w-full border rounded px-3 py-2"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Spreadsheet ID
                  </label>
                  <input
                    type="text"
                    placeholder="Enter your Google Sheets ID"
                    value={googleConfig.spreadsheetId}
                    onChange={(e) => setGoogleConfig({...googleConfig, spreadsheetId: e.target.value})}
                    className="w-full border rounded px-3 py-2"
                  />
                </div>
                <div className="bg-blue-50 p-3 rounded text-sm">
                  <p className="font-medium mb-2">Setup Instructions:</p>
                  <ol className="list-decimal list-inside space-y-1 text-xs">
                    <li>Create a Google Cloud project</li>
                    <li>Enable Google Sheets API</li>
                    <li>Create API credentials (API key)</li>
                    <li>Create a Google Sheet with 3 tabs: "Employees", "Attendance", "Settings"</li>
                    <li>Copy the spreadsheet ID from the URL</li>
                    <li>Make the sheet publicly readable</li>
                  </ol>
                </div>
                {googleConfig.isConfigured && (
                  <div className="bg-green-50 p-3 rounded text-sm text-green-700">
                    ✅ Google Sheets integration is configured!
                  </div>
                )}
              </div>
              <div className="flex justify-end space-x-2 mt-6">
                <button
                  onClick={() => setShowGoogleConfig(false)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                  Cancel
                </button>
                <button
                  onClick={() => {
                    if (googleConfig.apiKey && googleConfig.spreadsheetId) {
                      const newConfig = {...googleConfig, isConfigured: true};
                      setGoogleConfig(newConfig);
                      try {
                        localStorage.setItem('googleSheetsConfig', JSON.stringify(newConfig));
                      } catch (e) {
                        // localStorage not available
                      }
                      setShowGoogleConfig(false);
                      alert('✅ Google Sheets integration configured! You can now save and load data.');
                    } else {
                      alert('Please fill in both API Key and Spreadsheet ID');
                    }
                  }}
                  disabled={!googleConfig.apiKey || !googleConfig.spreadsheetId}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-300"
                >
                  Save Configuration
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Home Page - Dashboard */}
        {currentPage === 'home' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div className="flex items-center space-x-4">
                <h2 className="text-2xl font-bold text-gray-900">Dashboard Overview</h2>
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className={`flex items-center space-x-2 px-3 py-2 rounded-lg border transition-colors ${
                    showFilters ? 'bg-blue-500 text-white border-blue-500' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <Filter size={16} />
                  <span>Filters</span>
                </button>
                {selectedEmployeeFilter !== 'all' && (
                  <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                    Filtered: {employees.find(emp => emp.id.toString() === selectedEmployeeFilter)?.name || 'Employee'}
                  </span>
                )}
              </div>
              <div className="flex space-x-2">
                <button 
                  onClick={loadAllData}
                  disabled={!googleConfig.isConfigured || isLoading}
                  className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors disabled:bg-gray-300"
                >
                  <Download size={16} className="inline mr-2" />
                  {isLoading ? 'Loading...' : 'Load Data'}
                </button>
                <button 
                  onClick={saveAllData}
                  disabled={!googleConfig.isConfigured || isLoading}
                  className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors disabled:bg-gray-300"
                >
                  <Save size={16} className="inline mr-2" />
                  {isLoading ? 'Saving...' : 'Save Data'}
                </button>
                {lastSyncTime && (
                  <span className="text-sm text-gray-500 self-center">
                    Last sync: {lastSyncTime}
                  </span>
                )}
              </div>
            </div>

            {/* Filter Panel */}
            {showFilters && (
              <div className="bg-white p-6 rounded-lg shadow border">
                <h3 className="text-lg font-semibold mb-4">Filter Options</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Filter by Employee
                    </label>
                    <select
                      value={selectedEmployeeFilter}
                      onChange={(e) => setSelectedEmployeeFilter(e.target.value)}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="all">All Employees</option>
                      {employees.map(employee => (
                        <option key={employee.id} value={employee.id.toString()}>
                          {employee.name} - {employee.department}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div className="flex items-end">
                    <button
                      onClick={() => {
                        setSelectedEmployeeFilter('all');
                      }}
                      className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
                    >
                      Clear Filters
                    </button>
                  </div>
                  
                  <div className="text-sm text-gray-600">
                    <p className="font-medium mb-1">Filter Info:</p>
                    <p>• Select an employee to view their individual KPIs</p>
                    <p>• Charts will update to show filtered data</p>
                    <p>• Employee rankings will reflect current filter</p>
                  </div>
                </div>
              </div>
            )}

            {/* KPI Selection */}
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold">Configure KPIs</h3>
                {dataColumns.length > 0 && (
                  <button
                    onClick={() => setShowKpiMapping(true)}
                    className="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600"
                  >
                    Map Data Columns
                  </button>
                )}
              </div>
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Select KPIs</label>
                  <div className="space-y-2">
                    {availableKPIs.map(kpi => (
                      <label key={kpi.id} className="flex items-center">
                        <input
                          type="checkbox"
                          checked={selectedKPIs.includes(kpi.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedKPIs([...selectedKPIs, kpi.id]);
                            } else {
                              setSelectedKPIs(selectedKPIs.filter(id => id !== kpi.id));
                            }
                          }}
                          className="mr-2"
                        />
                        <kpi.icon size={16} className="mr-2" />
                        {kpi.name}
                        {kpiMappings[kpi.id]?.column && (
                          <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                            {kpiMappings[kpi.id].column}
                          </span>
                        )}
                      </label>
                    ))}
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Chart Types</label>
                  <div className="space-y-2">
                    {selectedKPIs.map(kpiId => (
                      <div key={kpiId} className="flex items-center justify-between">
                        <span className="text-sm">{availableKPIs.find(k => k.id === kpiId)?.name}</span>
                        <select
                          value={chartTypes[kpiId] || 'bar'}
                          onChange={(e) => setChartTypes({...chartTypes, [kpiId]: e.target.value})}
                          className="border rounded px-2 py-1 text-sm"
                        >
                          {chartOptions.map(chart => (
                            <option key={chart.id} value={chart.id}>{chart.name}</option>
                          ))}
                        </select>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* KPI Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {selectedKPIs.map(kpiId => {
                const kpi = kpiData[kpiId];
                const kpiInfo = availableKPIs.find(k => k.id === kpiId);
                return (
                  <div key={kpiId} className="bg-white p-6 rounded-lg shadow">
                    <div className="flex items-center justify-between mb-4">
                      <kpiInfo.icon className="text-blue-500" size={24} />
                      <span className={`text-sm font-medium ${kpi.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                        {kpi.change >= 0 ? '+' : ''}{kpi.change}%
                      </span>
                    </div>
                    <h3 className="text-lg font-semibold text-gray-900">{kpiInfo.name}</h3>
                    <p className="text-2xl font-bold text-gray-900 mb-4">
                      {kpiId === 'revenue' ? `$${kpi.value.toLocaleString()}` : kpi.value}
                    </p>
                    {renderChart(kpiId, chartTypes[kpiId], kpi)}
                  </div>
                );
              })}
            </div>

            {/* Employee Rankings Grid */}
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold">Employee Performance Rankings</h3>
                {selectedEmployeeFilter !== 'all' && (
                  <span className="text-sm text-blue-600 bg-blue-50 px-3 py-1 rounded">
                    Showing: {employees.find(emp => emp.id.toString() === selectedEmployeeFilter)?.name}
                  </span>
                )}
              </div>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-2">Rank</th>
                      <th className="text-left p-2">Name</th>
                      <th className="text-left p-2">Department</th>
                      <th className="text-left p-2">Performance Score</th>
                      <th className="text-left p-2">Attendance Rate</th>
                      <th className="text-left p-2">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {employees
                      .filter(emp => selectedEmployeeFilter === 'all' || emp.id.toString() === selectedEmployeeFilter)
                      .map((emp, index) => {
                        const empAttendance = attendance[emp.id] || {};
                        const presentDays = Object.values(empAttendance).filter(status => status === 'Present').length;
                        const attendanceRate = ((presentDays / 7) * 100).toFixed(1);
                        
                        return (
                          <tr key={emp.id} className="border-b hover:bg-gray-50">
                            <td className="p-2 font-bold">{index + 1}</td>
                            <td className="p-2">
                              <div className="flex items-center">
                                <div className="w-8 h-8 rounded-full bg-gray-300 mr-3 overflow-hidden flex-shrink-0">
                                  {emp.image ? (
                                    <img src={emp.image} alt={emp.name} className="w-full h-full object-cover" />
                                  ) : (
                                    <div className="w-full h-full flex items-center justify-center text-gray-500 text-xs">
                                      {emp.name.charAt(0)}
                                    </div>
                                  )}
                                </div>
                                {emp.name}
                              </div>
                            </td>
                            <td className="p-2">{emp.department}</td>
                            <td className="p-2">
                              <div className="flex items-center">
                                <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                                  <div 
                                    className="bg-blue-500 h-2 rounded-full" 
                                    style={{width: `${Math.random() * 100}%`}}
                                  ></div>
                                </div>
                                <span className="text-sm">{(Math.random() * 100).toFixed(1)}%</span>
                              </div>
                            </td>
                            <td className="p-2">{attendanceRate}%</td>
                            <td className="p-2">
                              <button
                                onClick={() => setSelectedEmployeeFilter(emp.id.toString())}
                                disabled={selectedEmployeeFilter === emp.id.toString()}
                                className="text-blue-600 hover:text-blue-900 text-sm disabled:text-gray-400"
                              >
                                {selectedEmployeeFilter === emp.id.toString() ? 'Filtered' : 'View Details'}
                              </button>
                            </td>
                          </tr>
                        );
                      })}
                  </tbody>
                </table>
              </div>
              {selectedEmployeeFilter !== 'all' && (
                <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                  <p className="text-sm text-blue-700">
                    <strong>Individual Employee View:</strong> KPIs above show data filtered for this specific employee. 
                    Use "Clear Filters" to return to company-wide view.
                  </p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Upload Page */}
        {currentPage === 'upload' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">Data Upload & Cleaning</h2>
            
            {/* Data Upload Status */}
            {uploadedData.length > 0 && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm">✓</span>
                    </div>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-green-800">
                      Data Successfully Uploaded
                    </h3>
                    <p className="text-sm text-green-700">
                      {uploadedData.length} rows loaded. Go to the Home tab and click "Map Data Columns" to connect your data to KPIs.
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* File Upload */}
            <div className="bg-white p-6 rounded-lg shadow">
              <h3 className="text-lg font-semibold mb-4">Upload Excel File</h3>
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <label className="cursor-pointer">
                  <span className="text-blue-500 hover:text-blue-600">Choose Excel file</span>
                  <input type="file" accept=".xlsx,.xls" onChange={handleFileUpload} className="hidden" />
                </label>
                <p className="text-gray-500 mt-2">Supports .xlsx and .xls files</p>
              </div>
            </div>

            {/* Data Cleaning Tools */}
            {uploadedData.length > 0 && (
              <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-4">Data Cleaning Tools</h3>
                <div className="flex space-x-4 mb-6">
                  <button
                    onClick={removeEmptyRows}
                    className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                  >
                    Remove Empty Rows
                  </button>
                  <button
                    onClick={removeDuplicates}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
                  >
                    Remove Duplicates
                  </button>
                  <button
                    onClick={standardizeText}
                    className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600"
                  >
                    Standardize Text
                  </button>
                </div>

                {/* Data Preview */}
                <div className="overflow-x-auto">
                  <table className="w-full border">
                    <thead>
                      <tr className="bg-gray-50">
                        {Object.keys(cleanedData[0] || {}).map(key => (
                          <th key={key} className="border p-2 text-left">{key}</th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {cleanedData.slice(0, 10).map((row, index) => (
                        <tr key={index}>
                          {Object.values(row).map((value, i) => (
                            <td key={i} className="border p-2">{String(value)}</td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                <p className="text-gray-500 mt-2">
                  Showing {Math.min(10, cleanedData.length)} of {cleanedData.length} rows
                </p>
              </div>
            )}
          </div>
        )}

        {/* Employees Page */}
        {currentPage === 'employees' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">Employee Management</h2>
              <button
                onClick={() => setShowAddEmployee(true)}
                className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
              >
                <Plus size={16} className="inline mr-2" />
                Add Employee
              </button>
            </div>

            {/* Add Employee Modal */}
            {showAddEmployee && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4 max-h-screen overflow-y-auto">
                  <h3 className="text-lg font-semibold mb-4">Add New Employee</h3>
                  <div className="space-y-4">
                    <div className="text-center">
                      <div className="w-24 h-24 rounded-full bg-gray-300 mx-auto mb-2 overflow-hidden">
                        {newEmployee.image ? (
                          <img src={newEmployee.image} alt="Preview" className="w-full h-full object-cover" />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-gray-500">
                            <Users size={32} />
                          </div>
                        )}
                      </div>
                      <label className="cursor-pointer bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600">
                        Upload Photo
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => handleImageUpload(e.target.files[0])}
                          className="hidden"
                        />
                      </label>
                    </div>
                    <input
                      type="text"
                      placeholder="Full Name"
                      value={newEmployee.name}
                      onChange={(e) => setNewEmployee({ ...newEmployee, name: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <input
                      type="text"
                      placeholder="Department"
                      value={newEmployee.department}
                      onChange={(e) => setNewEmployee({ ...newEmployee, department: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <input
                      type="text"
                      placeholder="Position"
                      value={newEmployee.position}
                      onChange={(e) => setNewEmployee({ ...newEmployee, position: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <input
                      type="email"
                      placeholder="Email Address"
                      value={newEmployee.email}
                      onChange={(e) => setNewEmployee({ ...newEmployee, email: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <input
                      type="tel"
                      placeholder="Phone Number"
                      value={newEmployee.phone}
                      onChange={(e) => setNewEmployee({ ...newEmployee, phone: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <textarea
                      placeholder="Home Address"
                      value={newEmployee.homeAddress}
                      onChange={(e) => setNewEmployee({ ...newEmployee, homeAddress: e.target.value })}
                      className="w-full border rounded px-3 py-2 h-20"
                    />
                  </div>
                  <div className="flex justify-end space-x-2 mt-6">
                    <button
                      onClick={() => {
                        setShowAddEmployee(false);
                        setNewEmployee({
                          name: '',
                          department: '',
                          position: '',
                          email: '',
                          phone: '',
                          homeAddress: '',
                          image: null
                        });
                      }}
                      className="px-4 py-2 text-gray-600 hover:text-gray-800"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={() => addEmployee(newEmployee)}
                      disabled={!newEmployee.name.trim()}
                      className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-300"
                    >
                      Add Employee
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Edit Employee Modal */}
            {editingEmployee && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4 max-h-screen overflow-y-auto">
                  <h3 className="text-lg font-semibold mb-4">Edit Employee</h3>
                  <div className="space-y-4">
                    <div className="text-center">
                      <div className="w-24 h-24 rounded-full bg-gray-300 mx-auto mb-2 overflow-hidden">
                        {editingEmployee.image ? (
                          <img src={editingEmployee.image} alt="Preview" className="w-full h-full object-cover" />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-gray-500">
                            <Users size={32} />
                          </div>
                        )}
                      </div>
                      <label className="cursor-pointer bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600">
                        Change Photo
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => handleImageUpload(e.target.files[0], true)}
                          className="hidden"
                        />
                      </label>
                    </div>
                    <input
                      type="text"
                      placeholder="Full Name"
                      value={editingEmployee.name}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, name: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <input
                      type="text"
                      placeholder="Department"
                      value={editingEmployee.department}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, department: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <input
                      type="text"
                      placeholder="Position"
                      value={editingEmployee.position}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, position: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <input
                      type="email"
                      placeholder="Email Address"
                      value={editingEmployee.email}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, email: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <input
                      type="tel"
                      placeholder="Phone Number"
                      value={editingEmployee.phone}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, phone: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    />
                    <textarea
                      placeholder="Home Address"
                      value={editingEmployee.homeAddress}
                      onChange={(e) => setEditingEmployee({ ...editingEmployee, homeAddress: e.target.value })}
                      className="w-full border rounded px-3 py-2 h-20"
                    />
                  </div>
                  <div className="flex justify-end space-x-2 mt-6">
                    <button
                      onClick={() => setEditingEmployee(null)}
                      className="px-4 py-2 text-gray-600 hover:text-gray-800"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={() => updateEmployee(editingEmployee.id, editingEmployee)}
                      disabled={!editingEmployee.name.trim()}
                      className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-300"
                    >
                      Save Changes
                    </button>
                  </div>
                </div>
              </div>
            )}

            <div className="bg-white rounded-lg shadow overflow-hidden">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Photo</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Department</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Position</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Address</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {employees.map(employee => (
                    <tr key={employee.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="w-10 h-10 rounded-full bg-gray-300 overflow-hidden">
                          {employee.image ? (
                            <img src={employee.image} alt={employee.name} className="w-full h-full object-cover" />
                          ) : (
                            <div className="w-full h-full flex items-center justify-center text-gray-500 text-sm">
                              {employee.name.charAt(0)}
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{employee.name}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{employee.department}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{employee.position}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{employee.email}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{employee.phone}</td>
                      <td className="px-6 py-4 text-sm text-gray-500 max-w-xs truncate">{employee.homeAddress}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex space-x-2">
                          <button
                            onClick={() => setEditingEmployee({...employee})}
                            className="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50"
                            title="Edit Employee"
                          >
                            <Edit size={16} />
                          </button>
                          <button
                            onClick={() => deleteEmployee(employee.id)}
                            className="text-red-600 hover:text-red-900 p-1 rounded hover:bg-red-50"
                            title="Delete Employee"
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Attendance Page */}
        {currentPage === 'attendance' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">Attendance Management</h2>
            
            <div className="bg-white rounded-lg shadow overflow-hidden">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Employee</th>
                    {weekDays.map(day => (
                      <th key={day} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {day.charAt(0).toUpperCase() + day.slice(1)}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {employees.map(employee => (
                    <tr key={employee.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {employee.name}
                      </td>
                      {weekDays.map(day => (
                        <td key={day} className="px-6 py-4 whitespace-nowrap">
                          <select
                            value={attendance[employee.id]?.[day] || 'Present'}
                            onChange={(e) => updateAttendance(employee.id, day, e.target.value)}
                            className="border rounded px-2 py-1 text-sm"
                          >
                            {attendanceOptions.map(option => (
                              <option key={option} value={option}>{option}</option>
                            ))}
                          </select>
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="flex justify-end">
              <button 
                onClick={saveAllData}
                disabled={!googleConfig.isConfigured || isLoading}
                className="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition-colors disabled:bg-gray-300"
              >
                <Save size={16} className="inline mr-2" />
                {isLoading ? 'Saving...' : 'Save Attendance'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
